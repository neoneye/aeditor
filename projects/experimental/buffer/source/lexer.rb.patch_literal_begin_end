Tue Oct 12 00:32:35 CEST 2004  darcs@lypanov.net
  * add two new highlight syms - :literal_define, :literal_ending

diff -rN -u miscprogs-old/ruvi/lib/3rdparty/aelexer/lexer.rb miscprogs-new/ruvi/lib/3rdparty/aelexer/lexer.rb
--- miscprogs-old/ruvi/lib/3rdparty/aelexer/lexer.rb	2004-10-12 00:35:36.300784408 +0200
+++ miscprogs-new/ruvi/lib/3rdparty/aelexer/lexer.rb	2004-10-12 00:30:53.000000000 +0200
@@ -450,11 +450,17 @@
 		end
 	end
 	def format_literal(text, interpolate, *chars)
+    ending = !@states.first.is_a?(LexerRuby::State::Literal)
 		re = if interpolate
 			/(\t+)|([\\].|#\{(?:[^\\\\]|[\\\\].)*?\})|(.)/
 		else
 			/(\t+)|([\\].)|(.)/
 		end
+    to_print = nil
+    if ending
+      to_print = text[-1, 1]
+      text = text[0..-2]
+    end
 		text.scan(re) do |s2, s1, s0|
 			format(s2, :literal_tab) if s2
 			if s1 and chars.size > 0
@@ -466,6 +472,7 @@
 			format(s1, :literal1) if s1
 			format2(s0, :literal) if s0
 		end
+    format(to_print, :literal_ending) if ending
 	end
 	def format_comment(text, code_normal, code_tab)
 		re = /(\t+)|(.)/
@@ -491,6 +498,9 @@
 			good_no_escapes = good.gsub(/\\\\/, '__').gsub(
 				/\\[\(\)\{\}\[\]\<\>]/, '__')
 			# we must do balancing
+      definer_length = [literal_type, pair_open].join.length + 1 # 1 is the %
+      definer = good.slice! 0, definer_length 
+      format2(definer, :literal_definer)
 			text1 = good
 			text2 = nil
 			re = Regexp.new("([" + 
